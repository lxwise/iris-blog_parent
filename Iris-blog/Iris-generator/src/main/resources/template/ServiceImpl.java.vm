package ${package}.service.impl;

import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.util.Map;
import java.util.List;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${mainPath}.common.R;
import ${mainPath}.common.ResultCode;
import ${mainPath}.common.PageBean;
import ${mainPath}.utils.PageUtil;
import ${mainPath}.utils.BeanUtil;
import ${mainPath}.common.PageReq;
import ${mainPath}.common.exception.BusinessException;
import ${package}.dao.mapper.${className}Mapper;
import ${package}.dao.entity.${className}Entity;
import ${package}.domain.dto.${className}DTO;
import ${package}.domain.vo.${className}VO;
import ${package}.service.${className}Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.Optional;
import javax.servlet.http.HttpServletResponse;

/**
 * @author ${author}
 * @date: ${datetime}
 * @description: ${comments}
 */
@Service("${classname}Service")
@Slf4j
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}Entity> implements ${className}Service {

    @Override
    public R select${className}List(PageReq<${className}DTO> req){

        ${className}DTO action = req.getAction();
        ${className}Entity entity = BeanUtil.newBean(action, ${className}Entity.class);
        Page<${className}Entity> page = this.page((new Page<>(req.getPageNo(), req.getPageSize())),
                Wrappers.lambdaQuery(entity)
                        .gt(action.getCreateTimeStart() != null,${className}Entity::getCreateTime,action.getCreateTimeStart())
                        .lt(action.getCreateTimeEnd() != null,${className}Entity::getCreateTime,action.getCreateTimeEnd())
                        .orderByDesc(${className}Entity::getId));

        PageBean<${className}VO> pageBean = PageUtil.pageBean(page, ${className}VO.class);
        return R.ok(pageBean);
    }


    @Override
    public R select${className}ById( ${pk.attrType} ${pk.attrname}){

        ${className}Entity entity = this.getById(${pk.attrname});
        Optional.ofNullable(entity).orElseThrow(() -> new BusinessException(ResultCode.NO_DATA_ERROR));
        ${className}VO vo = BeanUtil.newBean(entity, ${className}VO.class);
        return R.ok(vo);
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public R save${className}(${className}DTO dto){
        ${className}Entity entity = BeanUtil.newBean(dto, ${className}Entity.class);
        this.save(entity);
        return R.ok();
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public R update${className}(${className}DTO dto){
        this.checkExist(dto.getId());
        ${className}Entity entity = BeanUtil.newBean(dto, ${className}Entity.class);
        this.updateById(entity);
        return R.ok();
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public R remove${className}ByIds(List<${pk.attrType}> ${pk.attrname}s){
        this.removeByIds(${pk.attrname}s);
        return R.ok();
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public R updateStatusById(Long id) {
        ${className}Entity ${classname}entity = this.checkExist(dto.getId());
        ${classname}entity.setStatus(!${classname}entity.getStatus());
        this.updateById(${classname}entity);
        return R.ok();
    }

    @Override
    public void export(${className}DTO dto, HttpServletResponse response) {
        try {
            ${className}Entity entity = BeanUtil.newBean(dto, ${className}Entity.class);
            List<${className}Entity> list = this.list(Wrappers.lambdaQuery(entity)
                    .gt(dto.getCreateTimeStart() != null,${className}Entity::getCreateTime,dto.getCreateTimeStart())
                    .lt(dto.getCreateTimeEnd() != null,${className}Entity::getCreateTime,dto.getCreateTimeEnd())
                    .orderByDesc(${className}Entity::getId));
            ExcelUtils.write(response, "${comments}", "${comments}", ${className}VO.class, list.stream().map(item -> BeanUtil.newBean(item, ${className}VO.class)).toList());
        } catch (IOException e) {
            throw new BusinessException(ResultCode.REPORT_EXPORT_ERROR);
        }
    }

    public ${className}Entity checkExist(Long id){
        ${className}Entity entity = this.getById(id);
        Optional.ofNullable(entity).orElseThrow(() -> new BusinessException(ResultCode.NO_DATA_ERROR));
        return entity;
    }
}