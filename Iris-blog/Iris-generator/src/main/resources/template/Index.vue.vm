<template>
  <ContentWrap>
    <!-- 搜索工作栏 -->
    <el-form
        class="-mb-15px"
        :model="queryParams"
        ref="queryFormRef"
        :inline="true"
        label-width="68px"
    >
        #foreach($column in $columns)
            #if ($column.htmlType == "input")
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-input
                    v-model="queryParams.action.${column.attrname}"
                    placeholder="请输入${column.comments}"
                    clearable
                    @keyup.enter="handleQuery"
                    class="!w-240px"
                />
              </el-form-item>
            #elseif ($column.htmlType == "select" || $column.htmlType == "radio")
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-select
                    v-model="queryParams.action.${column.attrname}"
                    placeholder="请选择${column.comments}"
                    clearable
                    class="!w-240px"
                >
                    #if ($column.attrType == "Boolean")
                      <el-option
                          v-for="status in getBoolDictOptions(DICT_TYPE.SYSTEM_BOOLEAN_STATUS)"
                          :key="status.value"
                          :label="status.label"
                          :value="status.value"
                      />
                    #elseif ($column.attrType == "Integer" || $column.attrType == "Long" || $column.attrType == "Double")
                      <el-option
                          v-for="status in getIntDictOptions(DICT_TYPE.SYSTEM_NUMBER_STATUS)"
                          :key="status.value"
                          :label="status.label"
                          :value="status.value"
                      />
                    #else
                      <el-option
                          v-for="type in getStrDictOptions(DICT_TYPE.SYSTEM_TASK_ERROR_POLICY)"
                          :key="type.value"
                          :label="type.label"
                          :value="type.value"
                      />
                    #end
                </el-select>
              </el-form-item>
            #elseif($column.htmlType == "datetime")
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-date-picker
                    v-model="createTime"
                    value-format="YYYY-MM-DD HH:mm:ss"
                    type="daterange"
                    start-placeholder="开始日期"
                    end-placeholder="结束日期"
                    :default-time="[new Date('1 00:00:00'), new Date('1 23:59:59')]"
                    class="!w-220px"
                />
              </el-form-item>
            #end
        #end
      <el-form-item>
        <el-button type="primary" plain @click="handleQuery">
          <Icon icon="ep:search" class="mr-5px"/>
          搜索
        </el-button>
        <el-button type="primary" plain @click="resetQuery">
          <Icon icon="ep:refresh" class="mr-5px"/>
          重置
        </el-button>
        <el-button
            type="primary"
            @click="openForm('create')"
            v-hasPermi="['${pathName}:save']"
        >
          <Icon icon="ep:plus" class="mr-5px"/>
          新增
        </el-button>
        <el-button
            type="success"
            plain
            @click="handleExport"
            :loading="exportLoading"
            v-hasPermi="['${pathName}:export']"
        >
          <Icon icon="ep:download" class="mr-5px"/>
          导出
        </el-button>
      </el-form-item>
    </el-form>
  </ContentWrap>
  <!-- 列表 -->
  <ContentWrap>
    <el-table v-loading="loading" :data="list" :show-overflow-tooltip="true">
      <el-table-column type="index" label="编号" width="100" align="center"/>
        #foreach($column in $columns)
            #if ($column.attrType == "LocalDateTime")## 时间类型
              <el-table-column
                  label="${column.comments}"
                  align="center"
                  prop="${column.attrname}"
                  :formatter="dateFormatter"
                  width="180px"
              />
            #else
              <el-table-column label="${column.comments}" align="center" prop="${column.attrname}"/>
            #end
        #end
      <el-table-column label="操作" align="center">
        <template #default="scope">
          <el-button
              link
              type="primary"
              @click="openForm('update', scope.row.id)"
              v-hasPermi="['${pathName}:update']"
          >
            <Icon icon="ep:edit" />
            编辑
          </el-button>
          <el-button
              link
              type="danger"
              @click="handleDelete(scope.row.id)"
              v-hasPermi="['${pathName}:delete']"
          >
            <Icon icon="ep:delete" />
            删除
          </el-button>
        </template>
      </el-table-column>
    </el-table>
    <!-- 分页 -->
    <Pagination
        v-model:limit="queryParams.pageSize"
        v-model:page="queryParams.pageNo"
        :total="total"
        @pagination="getList"
    />
  </ContentWrap>
  <!-- 表单弹窗：添加/修改 -->
  <${className}Form ref="formRef" @success="getList"/>
</template>
<script setup lang="ts">
  import {DICT_TYPE, getBoolDictOptions,getStrDictOptions,getIntDictOptions} from '@/utils/dict'
  import {dateFormatter} from '@/utils/formatTime'
  import download from '@/utils/download'
  import * as ${className}Api from '@/api/${classname}'
  import ${className}Form from './${className}Form.vue'
  const createTime = ref([])
  /** ${comments} 列表 */
  defineOptions({name: '${className}'})
  const message = useMessage() // 消息弹窗
  const {t} = useI18n() // 国际化
  const loading = ref(true) // 列表的加载中
  const total = ref(0) // 列表的总页数
  const list = ref([]) // 列表的数据
  const queryParams = reactive({
    pageNo: 1,
    pageSize: 10,
    action: {
      #foreach ($column in $columns)
          $column.attrname: undefined,
      #end
    }
  })
  const queryFormRef = ref() // 搜索的表单
  const exportLoading = ref(false) // 导出的加载中

  /** 查询列表 */
  const getList = async () => {
    loading.value = true
    try {
      if (createTime.value) {
        queryParams.action.createTimeStart = createTime.value[0];
        queryParams.action.createTimeEnd = createTime.value[1];
      }
      const data = await ${className}Api.get${className}Page(queryParams)
      list.value = data.records
      total.value = data.total
    } finally {
      loading.value = false
    }
  }

  /** 搜索按钮操作 */
  const handleQuery = () => {
    queryParams.pageNo = 1
    getList()
  }

  /** 重置按钮操作 */
  const resetQuery = () => {
    queryParams.action = {}
    createTime.value = []
    queryFormRef.value.resetFields()
    handleQuery()
  }

  /** 添加/修改操作 */
  const formRef = ref()
  const openForm = (type: string, id?: number) => {
    formRef.value.open(type, id)
  }

  /** 删除按钮操作 */
  const handleDelete = async (id: number) => {
    try {
      // 删除的二次确认
      await message.delConfirm()
      // 发起删除
      await ${className}Api.delete${className}(id)
      message.success(t('common.delSuccess'))
      // 刷新列表
      await getList()
    } catch {
    }
  }

  /** 导出按钮操作 */
  const handleExport = async () => {
    try {
      // 导出的二次确认
      await message.exportConfirm()
      // 发起导出
      exportLoading.value = true
      const data = await ${className}Api.export${className}(queryParams)
      download.excel(data, '${comments}.xls')
    } catch {
    } finally {
      exportLoading.value = false
    }
  }

  /** 初始化 **/
  onMounted(() => {
    getList()
  })
</script>