<template>
  <Dialog :title="dialogTitle" v-model="dialogVisible">
    <el-form
        ref="formRef"
        :model="formData"
        :rules="formRules"
        label-width="100px"
        v-loading="formLoading"
    >
        #foreach($column in $columns)
            #if ($column.htmlType == "input" && $column.attrname !="id")## 忽略主键，不用在表单里
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-input v-model="formData.${column.attrname}" placeholder="请输入${column.comments}"/>
              </el-form-item>
            #elseif($column.htmlType == "imageUpload")## 图片上传
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <UploadImg v-model="formData.${column.attrname}"/>
              </el-form-item>
            #elseif($column.htmlType == "fileUpload")## 文件上传
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <UploadFile v-model="formData.${column.attrname}"/>
              </el-form-item>
            #elseif($column.htmlType == "editor")## 文本编辑器
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <Editor v-model="formData.${column.attrname}" height="150px"/>
              </el-form-item>
            #elseif($column.htmlType == "select")## 下拉框
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-select v-model="formData.${column.attrname}" placeholder="请选择${column.comments}">
                  <el-option label="请选择数据生成" value=""/>
                </el-select>
              </el-form-item>
            #elseif($column.htmlType == "checkbox")## 多选框
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-checkbox-group v-model="formData.${column.attrname}">
                  <el-checkbox>请选择数据生成</el-checkbox>
                </el-checkbox-group>
              </el-form-item>
            #elseif($column.htmlType == "radio")## 单选框
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-radio-group v-model="formData.${column.attrname}">
                  <el-radio label="1">请选择数据生成</el-radio>
                </el-radio-group>
              </el-form-item>
            #elseif($column.htmlType == "datetime")## 时间框
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-date-picker
                    v-model="formData.${column.attrname}"
                    type="date"
                    value-format="x"
                    placeholder="选择${column.comments}"
                />
              </el-form-item>
            #elseif($column.htmlType == "textarea")## 文本框
              <el-form-item label="${column.comments}" prop="${column.attrname}">
                <el-input v-model="formData.${column.attrname}" type="textarea" placeholder="请输入${column.comments}"/>
              </el-form-item>
            #end
        #end
    </el-form>
    <template #footer>
      <el-button @click="submitForm" type="primary" :disabled="formLoading">确 定</el-button>
      <el-button @click="dialogVisible = false">取 消</el-button>
    </template>
  </Dialog>
</template>
<script setup lang="ts">
  import * as ${className}Api from '@/api/${classname}'
  /** ${comments}表单 */
  defineOptions({name: '${className}Form'})
  const {t} = useI18n() // 国际化
  const message = useMessage() // 消息弹窗
  const dialogVisible = ref(false) // 弹窗的是否展示
  const dialogTitle = ref('') // 弹窗的标题
  const formLoading = ref(false) // 表单的加载中：1）修改时的数据加载；2）提交的按钮禁用
  const formType = ref('') // 表单的类型：create - 新增；update - 修改
  const formData = ref({
      #foreach ($column in $columns)
              $column.attrname: undefined,
      #end
  })
  const formRules = reactive({
      #foreach ($column in $columns)
              $column.attrname: [{ required: true, message: '$column.comments+不能为空', trigger: 'blur' }],
      #end
  })
  const formRef = ref() // 表单 Ref
  /** 打开弹窗 */
  const open = async (type: string, id?: number) => {
    dialogVisible.value = true
    dialogTitle.value = t('action.' + type)
    formType.value = type
    resetForm()
    // 修改时，设置数据
    if (id) {
      formLoading.value = true
      try {
        formData.value = await ${className}Api.get${className}(id)
      } finally {
        formLoading.value = false
      }
    }
  }
  defineExpose({open}) // 提供 open 方法，用于打开弹窗

  /** 提交表单 */
  const emit = defineEmits(['success']) // 定义 success 事件，用于操作成功后的回调
  const submitForm = async () => {
    // 校验表单
    if (!formRef) return
    const valid = await formRef.value.validate()
    if (!valid) return
    // 提交请求
    formLoading.value = true
    // 提交请求
    formLoading.value = true
    try {
      const data = formData.value as unknown as ${className}Api.${className}VO
      if (formType.value === 'create') {
        await ${className}Api.create${className}(data)
        message.success(t('common.createSuccess'))
      } else {
        await ${className}Api.update${className}(data)
        message.success(t('common.updateSuccess'))
      }
      dialogVisible.value = false
      // 发送操作成功的事件
      emit('success')
    } finally {
      formLoading.value = false
    }
  }
  /** 重置表单 */
  const resetForm = () => {
    formData.value = {
        #foreach ($column in $columns)
                $column.attrname: undefined,
        #end
    }
    formRef.value?.resetFields()
  }
</script>